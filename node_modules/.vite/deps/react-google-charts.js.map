{
  "version": 3,
  "sources": ["../../react-google-charts/src/hooks/useLoadScript.ts", "../../react-google-charts/src/hooks/useLoadGoogleCharts.ts", "../../react-google-charts/src/default-props.ts", "../../react-google-charts/src/components/GoogleChartControls.tsx", "../../react-google-charts/src/generate-unique-id.ts", "../../react-google-charts/src/utils/GoogleChartControlsInternal.ts", "../../react-google-charts/src/hooks/internal/useGoogleChartControls.tsx", "../../react-google-charts/src/hooks/internal/useChartId.ts", "../../react-google-charts/src/constants.ts", "../../react-google-charts/src/load-data-table-from-spreadsheet.ts", "../../react-google-charts/src/utils/GoogleChartInternal.ts", "../../react-google-charts/src/hooks/internal/useGoogleChartDataTable.ts", "../../react-google-charts/src/hooks/internal/useGoogleChartEvents.ts", "../../react-google-charts/src/components/GoogleChart.tsx", "../../react-google-charts/src/Context.tsx", "../../react-google-charts/src/Chart.tsx", "../../react-google-charts/src/types.ts"],
  "sourcesContent": ["import { useEffect, useState } from \"react\";\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\nexport function useLoadScript(src: string) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const onLoad = () => {\n    setIsLoading(false);\n    setIsSuccess(true);\n  };\n  useEffect(() => {\n    if (!document) {\n      const error = new Error(\n        `[ScriptLoadingError] document not defined when attempting to load ${src}`,\n      );\n      setError(error);\n      return;\n    }\n\n    // Find script tag with same src in DOM.\n    const foundScript = document.querySelector<HTMLScriptElement>(\n      `script[src=\"${src}\"]`,\n    );\n\n    // Call onLoad if script marked as loaded.\n    if (foundScript?.dataset.loaded) {\n      onLoad();\n      return;\n    }\n\n    // Create or get existed tag.\n    const script = foundScript || document.createElement(\"script\");\n\n    // Set src if no script was found.\n    if (!foundScript) {\n      script.src = src;\n    }\n\n    // Mark script as loaded on load event.\n    const onLoadWithMarker = () => {\n      script.dataset.loaded = \"1\";\n      onLoad();\n    };\n\n    script.addEventListener(\"load\", onLoadWithMarker);\n\n    script.addEventListener(\"error\", (err) => {\n      console.error(\"Failed to load script:\", src, err);\n      const error = new Error(\n        `[ScriptLoadingError] Failed to load script: ${src}`,\n      );\n      setError(error);\n    });\n\n    // Add to DOM if not yet added.\n    if (!foundScript) {\n      document.head.append(script);\n    }\n  }, []);\n  return {\n    isLoading,\n    error,\n    isSuccess,\n  };\n}\n", "import { useState, useEffect } from \"react\";\nimport {\n  GoogleChartVersion,\n  GoogleChartPackages,\n  GoogleViz,\n  ReactGoogleChartProps,\n} from \"../types\";\nimport { useLoadScript } from \"./useLoadScript\";\n\nexport interface IUseLoadGoogleChartsParams {\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n}\n\nconst isGoogleReady = (google?: GoogleViz) => {\n  return google && google.charts;\n};\n\nconst isGoogleChartsReady = (\n  props: ReactGoogleChartProps,\n  google?: GoogleViz,\n) => {\n  const { controls, toolbarItems, getChartEditor } = props;\n  return (\n    google &&\n    google.charts &&\n    google.visualization &&\n    google.visualization.ChartWrapper &&\n    google.visualization.Dashboard &&\n    (!controls || google.visualization.ChartWrapper) &&\n    (!getChartEditor || google.visualization.ChartEditor) &&\n    (!toolbarItems || google.visualization.drawToolbar)\n  );\n};\n\nconst getGoogleInstanceFromWindow = (props: ReactGoogleChartProps) => {\n  // @ts-expect-error Getting object from global namespace.\n  const google = window.google as GoogleViz;\n  return google;\n};\n\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\nexport function useLoadGoogleCharts(props: ReactGoogleChartProps) {\n  const {\n    chartVersion = \"current\",\n    chartPackages = [\"corechart\", \"controls\"],\n    chartLanguage = \"en\",\n    mapsApiKey,\n  } = props;\n  const [googleCharts, setGoogleCharts] = useState<GoogleViz | null>(null);\n  const [scriptInitializationError, setScriptInitializationError] =\n    useState<Error | null>(null);\n  const [googleChartsInitializationError, setGoogleChartsInitializationError] =\n    useState<Error | null>(null);\n  const {\n    isLoading,\n    error: scriptLoadingError,\n    isSuccess,\n  } = useLoadScript(\n    props.chartLoaderScriptUrl || \"https://www.gstatic.com/charts/loader.js\",\n  );\n\n  useEffect(() => {\n    if (!isSuccess) {\n      return;\n    }\n    const google = getGoogleInstanceFromWindow(props);\n    if (!isGoogleReady(google)) {\n      const error = new Error(\n        \"[ScriptInitializationError] Script loaded but Google not attached to window.\",\n      );\n      setScriptInitializationError(error);\n      return;\n    }\n    if (isGoogleChartsReady(props, google)) {\n      setGoogleCharts(google);\n      return;\n    }\n    google.charts.load(chartVersion, {\n      packages: chartPackages,\n      language: chartLanguage,\n      mapsApiKey,\n    });\n    google.charts.setOnLoadCallback(() => {\n      if (!isGoogleChartsReady(props, google)) {\n        const error = new Error(\n          \"[GoogleChartsInitializationError] Google Charts not ready after load callback.\",\n        );\n        console.error(error);\n        setGoogleChartsInitializationError(error);\n        return;\n      }\n      setGoogleCharts(google);\n    });\n  }, [isSuccess]);\n  return {\n    error:\n      scriptLoadingError ||\n      scriptInitializationError ||\n      googleChartsInitializationError,\n    isLoading,\n    google: googleCharts,\n  };\n}\n\nexport interface ILoadGoogleChartsProps extends IUseLoadGoogleChartsParams {\n  onLoad?(googleCharts: GoogleViz): void;\n  onError?(): void;\n}\n", "import { ReactGoogleChartProps } from \"./types\";\n\nexport const chartDefaultProps: Partial<ReactGoogleChartProps> = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: () => {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1,\n  },\n  rootProps: {},\n  chartWrapperParams: {},\n  chartLoaderScriptUrl: \"https://www.gstatic.com/charts/loader.js\",\n};\n", "import React from \"react\";\nimport { GoogleChartControlAndProp } from \"../hooks/internal/useGoogleChartControls\";\n\nexport type FilterControl = (control: GoogleChartControlAndProp) => boolean;\n\ntype Props = {\n  isReady: boolean;\n  chartControls: GoogleChartControlAndProp[] | null;\n  filter?: FilterControl;\n};\nexport const GoogleChartControls = (props: Props) => {\n  const { isReady, chartControls, filter } = props;\n  if (!isReady || !chartControls || !chartControls?.length) {\n    return null;\n  }\n  return (\n    <>\n      {chartControls\n        .filter(({ controlProp, control }) => {\n          return filter ? filter({ control, controlProp }) : true;\n        })\n        .map(({ control }) => {\n          return (\n            <div key={control.getContainerId()} id={control.getContainerId()} />\n          );\n        })}\n    </>\n  );\n};\n", "let uniqueID = 0;\nexport const generateUniqueID = () => {\n  uniqueID += 1;\n  return `reactgooglegraph-${uniqueID}`;\n};\n", "import {\n  GoogleViz,\n  ReactGoogleChartProps,\n  GoogleChartControlProp,\n  GoogleChartControl,\n  UseChartControlsParams,\n} from \"../types\";\nimport { generateUniqueID } from \"../generate-unique-id\";\n\nexport type Props = ReactGoogleChartProps & {\n  google: GoogleViz;\n};\n\nexport type GoogleChartControlAndProp = {\n  controlProp: GoogleChartControlProp;\n  control: GoogleChartControl;\n};\n\n/**\n * An internal helper class for creating and managing Google Charts controls.\n * Offers high-level methods to interact with the Google Chart Controls.\n */\nexport class GoogleChartControlsInternal {\n  /**\n   * Initialize the controls once chart is ready\n   */\n  private static initializeControls = (\n    googleChartControls: GoogleChartControlAndProp[],\n  ) => {\n    for (let i = 0; i < googleChartControls.length; i += 1) {\n      const { controlType, options, controlWrapperParams } =\n        googleChartControls[i].controlProp;\n      if (controlWrapperParams && \"state\" in controlWrapperParams) {\n        googleChartControls[i].control.setState(controlWrapperParams[\"state\"]);\n      }\n      googleChartControls[i].control.setOptions(options);\n      googleChartControls[i].control.setControlType(controlType);\n    }\n  };\n\n  /**\n   * listen to the control events (ready, statechange, error) specified in the controlEvents prop\n   */\n  public static listenToControlEvents = (\n    googleChartControls: GoogleChartControlAndProp[],\n    props: UseChartControlsParams,\n  ) => {\n    const { google } = props;\n    return googleChartControls.flatMap((chartControl) => {\n      const { control, controlProp } = chartControl;\n      const { controlEvents = [] } = controlProp;\n      return controlEvents.map((event) => {\n        const { callback, eventName } = event;\n        return google.visualization.events.addListener(\n          control,\n          eventName,\n          (...args) => {\n            callback({\n              chartWrapper: null,\n              controlWrapper: control,\n              props: props,\n              google: google,\n              eventArgs: args,\n            });\n          },\n        );\n      });\n    });\n  };\n\n  /**\n   * If controlID is not provided, generate a unique controlID\n   */\n  private static createControlId = (id: undefined | string) => {\n    let controlID: string;\n    if (typeof id === \"undefined\") {\n      controlID = `googlechart-control-${generateUniqueID()}`;\n    } else {\n      controlID = id;\n    }\n    return controlID;\n  };\n\n  /**\n   * Map the control props to Google Chart Controls\n   */\n  private static createChartControls = (props: UseChartControlsParams) => {\n    const { controls, google } = props;\n    if (!controls) {\n      return null;\n    }\n\n    return controls.map((control, i) => {\n      const {\n        controlID: controlIDMaybe,\n        controlType,\n        options: controlOptions,\n        controlWrapperParams,\n      } = control;\n      const controlID = this.createControlId(controlIDMaybe);\n      return {\n        controlProp: control,\n        control: new google.visualization.ControlWrapper({\n          containerId: controlID,\n          controlType,\n          options: controlOptions,\n          ...controlWrapperParams,\n        }),\n      };\n    });\n  };\n\n  static addControls = (props: UseChartControlsParams) => {\n    const { chartWrapper, chartDashboard } = props;\n    const googleChartControls = this.createChartControls(props);\n    if (!googleChartControls || !chartDashboard || !chartWrapper) {\n      return null;\n    }\n    chartDashboard.bind(\n      googleChartControls.map(({ control }) => control),\n      chartWrapper,\n    );\n    this.initializeControls(googleChartControls);\n    return googleChartControls;\n  };\n}\n", "import * as React from \"react\";\nimport {\n  GoogleViz,\n  ReactGoogleChartProps,\n  GoogleChartControlProp,\n  GoogleChartControl,\n  UseChartControlsParams,\n} from \"../../types\";\nimport {\n  FilterControl,\n  GoogleChartControls,\n} from \"../../components/GoogleChartControls\";\nimport { GoogleChartControlsInternal } from \"../../utils/GoogleChartControlsInternal\";\n\nconst useCreateChartControls = (\n  controls: ReactGoogleChartProps[\"controls\"],\n) => {\n  const [chartControls, setChartControls] = React.useState<\n    GoogleChartControl[] | null\n  >(null);\n\n  const controlAndProp = React.useMemo(() => {\n    if (!chartControls || !controls) return null;\n\n    return controls\n      .map((controlProp, i): GoogleChartControlAndProp | undefined => {\n        const control: GoogleChartControl | undefined = chartControls[i];\n        return control ? { controlProp, control } : undefined;\n      })\n      .flatMap((controlAndProp) => (controlAndProp ? [controlAndProp] : []));\n  }, [chartControls, controls]);\n\n  return [controlAndProp, setChartControls] as const;\n};\n\nconst useListenToControlEvents = (\n  chartControls: GoogleChartControlAndProp[],\n  props: UseChartControlsParams,\n) => {\n  React.useEffect(() => {\n    const listeners = GoogleChartControlsInternal.listenToControlEvents(\n      chartControls ?? [],\n      props,\n    );\n\n    return () => {\n      listeners.forEach((listener) => {\n        props.google.visualization.events.removeListener(listener);\n      });\n    };\n  }, [chartControls, props]);\n};\n\nexport type Props = ReactGoogleChartProps & {\n  google: GoogleViz;\n};\n\nexport type GoogleChartControlAndProp = {\n  controlProp: GoogleChartControlProp;\n  control: GoogleChartControl;\n};\n\nexport const useChartControls = (props: UseChartControlsParams) => {\n  const [chartControls, setChartControls] = useCreateChartControls(\n    props.controls,\n  );\n\n  useListenToControlEvents(chartControls ?? [], props);\n\n  /**\n   * Render the container divs for the controls\n   */\n  const renderControl = (filter: FilterControl) => {\n    const { chartWrapper, chartDashboard } = props;\n    return (\n      <GoogleChartControls\n        {...props}\n        isReady={Boolean(chartWrapper && chartDashboard)}\n        chartControls={chartControls}\n        filter={filter}\n      />\n    );\n  };\n\n  return {\n    addControls: (props: UseChartControlsParams) => {\n      const controls = GoogleChartControlsInternal.addControls(props);\n      setChartControls(controls?.map((control) => control.control) ?? null);\n    },\n    renderControl,\n  };\n};\n", "import * as React from \"react\";\nimport { ReactGoogleChartProps } from \"../../types\";\nimport { generateUniqueID } from \"../../generate-unique-id\";\n\nexport const useChartId = (\n  props: Pick<ReactGoogleChartProps, \"graphID\" | \"graph_id\">,\n) => {\n  const chartIdRef = React.useRef<string | null>(null);\n  const getChartId = (): string => {\n    const { graphID, graph_id } = props;\n    const chartIdFromProps = graphID || graph_id;\n    let currentChartId: string;\n    if (chartIdFromProps) {\n      currentChartId = chartIdFromProps as string;\n    } else {\n      currentChartId = chartIdRef.current || generateUniqueID();\n    }\n    chartIdRef.current = currentChartId;\n    return chartIdRef.current as string;\n  };\n  const chartId = getChartId();\n  return { chartId };\n};\n", "export const DEFAULT_CHART_COLORS = [\n  \"#3366CC\",\n  \"#DC3912\",\n  \"#FF9900\",\n  \"#109618\",\n  \"#990099\",\n  \"#3B3EAC\",\n  \"#0099C6\",\n  \"#DD4477\",\n  \"#66AA00\",\n  \"#B82E2E\",\n  \"#316395\",\n  \"#994499\",\n  \"#22AA99\",\n  \"#AAAA11\",\n  \"#6633CC\",\n  \"#E67300\",\n  \"#8B0707\",\n  \"#329262\",\n  \"#5574A6\",\n  \"#3B3EAC\",\n];\n", "import { GoogleViz } from \"./types\";\n\nexport const loadDataTableFromSpreadSheet = async (\n  googleViz: GoogleViz,\n  spreadSheetUrl: string,\n  urlParams: {\n    headers?: number;\n    gid?: any;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  } = {},\n) => {\n  return new Promise((resolve, reject) => {\n    const headers = `${\n      urlParams.headers ? `headers=${urlParams.headers}` : `headers=0`\n    }`;\n    const queryString = `${\n      urlParams.query ? `&tq=${encodeURIComponent(urlParams.query)}` : ``\n    }`;\n    const gid = `${urlParams.gid ? `&gid=${urlParams.gid}` : \"\"}`;\n    const sheet = `${urlParams.sheet ? `&sheet=${urlParams.sheet}` : \"\"}`;\n    const access_token = `${\n      urlParams.access_token ? `&access_token=${urlParams.access_token}` : \"\"\n    }`;\n    const urlQueryString = `${headers}${gid}${sheet}${queryString}${access_token}`;\n    const urlToSpreadSheet = `${spreadSheetUrl}/gviz/tq?${urlQueryString}`; //&tq=${queryString}`;\n    const query = new googleViz.visualization.Query(urlToSpreadSheet);\n    query.send((response: any) => {\n      if (response.isError()) {\n        reject(\n          `Error in query:  ${response.getMessage()} ${response.getDetailedMessage()}`,\n        );\n      } else {\n        resolve(response.getDataTable());\n      }\n    });\n  });\n};\n", "import { DEFAULT_CHART_COLORS } from \"../constants\";\nimport { UseGoogleChartDataTableParams } from \"../hooks/internal/useGoogleChartDataTable\";\nimport { loadDataTableFromSpreadSheet } from \"../load-data-table-from-spreadsheet\";\nimport { ApplyFormattersParams, GoogleDataTable } from \"../types\";\n\nconst GRAY_COLOR = \"#CCCCCC\";\n\n/**\n * An internal helper class around the Google Chart API.\n * Offers high-level methods to interact with the Google Chart API.\n */\nexport class GoogleChartInternal {\n  private static grayOutHiddenColumnsLabel = (\n    props: UseGoogleChartDataTableParams,\n    hiddenColumns: string[],\n  ) => {\n    const { googleChartWrapper, options } = props;\n    if (!googleChartWrapper) {\n      console.error(\"googleChartWrapper is not defined\");\n      return;\n    }\n    const dataTable = googleChartWrapper.getDataTable();\n    if (!dataTable) return;\n    const columnCount = dataTable.getNumberOfColumns();\n    const hasAHiddenColumn = hiddenColumns.length > 0;\n    if (hasAHiddenColumn === false) return;\n    const colors = Array.from({ length: columnCount - 1 }).map(\n      (_dontcare, i) => {\n        const columnID = this.getColumnId(dataTable, i + 1);\n        if (hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      },\n    );\n    googleChartWrapper.setOptions({\n      ...options,\n      colors,\n    });\n    googleChartWrapper.draw();\n  };\n  /**\n   * Listens to user clicking on the legend to toggle the visibility of a column.\n   * When a user clicks on a legend item, the column id is added to / removed from the hiddenColumns state.\n   */\n  public static listenToLegendToggle = (\n    props: UseGoogleChartDataTableParams,\n    hiddenColumnsState: [\n      string[],\n      React.Dispatch<React.SetStateAction<string[]>>,\n    ],\n  ) => {\n    const [hiddenColumns, setHiddenColumns] = hiddenColumnsState;\n    const { google, googleChartWrapper } = props;\n    if (!googleChartWrapper) {\n      console.error(\"googleChartWrapper is not defined\");\n      return;\n    }\n    return google.visualization.events.addListener(\n      googleChartWrapper,\n      \"select\",\n      () => {\n        const chart = googleChartWrapper.getChart();\n        const selection = chart.getSelection();\n        const dataTable = googleChartWrapper.getDataTable();\n        if (\n          selection.length === 0 ||\n          // We want to listen to when a whole row is selected. This is the case only when row === null\n          selection[0].row !== null ||\n          !dataTable\n        ) {\n          return;\n        }\n\n        const columnIndex = selection[0].column;\n        const columnID = this.getColumnId(dataTable, columnIndex);\n        // If the column is hidden remove it from state, otherwise add it\n        if (hiddenColumns?.includes(columnID)) {\n          setHiddenColumns((state) => [\n            ...state.filter((colID) => colID !== columnID),\n          ]);\n        } else {\n          setHiddenColumns((state) => [...state, columnID]);\n        }\n      },\n    );\n  };\n\n  /**\n   * (Re-)Draw a Google Chart with the given data, options, and chart type.\n   */\n  public static draw = async (\n    props: UseGoogleChartDataTableParams & { hiddenColumns: string[] },\n  ) => {\n    const {\n      data,\n      diffdata,\n      rows,\n      columns,\n      options,\n      chartType,\n      formatters,\n      spreadSheetUrl,\n      spreadSheetQueryParameters,\n      googleChartDashboard,\n      googleChartWrapper,\n      google,\n      hiddenColumns,\n      legendToggle,\n      legend_toggle,\n    } = props;\n    if (!googleChartWrapper) {\n      console.error(\"draw was called with googleChartWrapper = null\");\n      return;\n    }\n    let dataTable: GoogleDataTable;\n    let chartDiff = null;\n    if (diffdata) {\n      const oldData = google.visualization.arrayToDataTable(diffdata.old);\n      const newData = google.visualization.arrayToDataTable(diffdata.new);\n      chartDiff = google.visualization[chartType].prototype.computeDiff(\n        oldData,\n        newData,\n      );\n    }\n    if (data) {\n      if (data instanceof google.visualization.DataTable) {\n        dataTable = data;\n      } else if (Array.isArray(data)) {\n        dataTable = google.visualization.arrayToDataTable(data);\n      } else {\n        dataTable = new google.visualization.DataTable(data);\n      }\n    } else if (rows && columns) {\n      dataTable = google.visualization.arrayToDataTable([columns, ...rows]);\n    } else if (spreadSheetUrl) {\n      dataTable = (await loadDataTableFromSpreadSheet(\n        google,\n        spreadSheetUrl,\n        spreadSheetQueryParameters,\n      )) as GoogleDataTable;\n    } else {\n      dataTable = google.visualization.arrayToDataTable([]);\n    }\n    const columnCount = dataTable.getNumberOfColumns();\n\n    const viewColumns = Array(columnCount)\n      .fill(0)\n      .map((_c, i) => {\n        const columnID = this.getColumnId(dataTable, i);\n        if (hiddenColumns.includes(columnID)) {\n          return {\n            label: dataTable.getColumnLabel(i),\n            type: dataTable.getColumnType(i),\n            calc: () => null,\n          };\n        } else {\n          return i;\n        }\n      });\n    const chart = googleChartWrapper.getChart();\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      chart && chart.clearChart();\n    }\n    googleChartWrapper.setChartType(chartType);\n    googleChartWrapper.setOptions(options || {});\n    const viewTable = new google.visualization.DataView(dataTable);\n    viewTable.setColumns(viewColumns);\n    googleChartWrapper.setDataTable(viewTable);\n    googleChartWrapper.draw();\n    if (googleChartDashboard) {\n      googleChartDashboard.draw(dataTable);\n    }\n\n    if (chartDiff) {\n      googleChartWrapper.setDataTable(chartDiff);\n      googleChartWrapper.draw();\n    }\n    if (formatters) {\n      this.applyFormatters({ dataTable, formatters, google });\n      googleChartWrapper.setDataTable(dataTable);\n      googleChartWrapper.draw();\n    }\n    if (legendToggle === true || legend_toggle === true) {\n      this.grayOutHiddenColumnsLabel(props, hiddenColumns);\n    }\n    return;\n  };\n  /**\n   * Get the column ID of a column in a GoogleDataTable.\n   * If the column has an ID, return the ID, otherwise return the label.\n   */\n  private static getColumnId = (\n    dataTable: GoogleDataTable,\n    columnIndex: number,\n  ) => {\n    return (\n      dataTable.getColumnId(columnIndex) ||\n      dataTable.getColumnLabel(columnIndex)\n    );\n  };\n\n  /**\n   * Apply Chart Formatters passed under the formatters prop to the GoogleDataTable\n   */\n  private static applyFormatters = ({\n    dataTable,\n    formatters,\n    google,\n  }: ApplyFormattersParams) => {\n    for (let formatter of formatters) {\n      switch (formatter.type) {\n        case \"ArrowFormat\": {\n          const vizFormatter = new google.visualization.ArrowFormat(\n            formatter.options,\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          return;\n        }\n        case \"BarFormat\": {\n          const vizFormatter = new google.visualization.BarFormat(\n            formatter.options,\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          return;\n        }\n        case \"ColorFormat\": {\n          const vizFormatter = new google.visualization.ColorFormat(\n            formatter.options,\n          );\n          const { ranges } = formatter;\n          if (ranges) {\n            for (let range of ranges) {\n              vizFormatter.addRange(...range);\n            }\n          }\n          vizFormatter.format(dataTable, formatter.column);\n          return;\n        }\n        case \"DateFormat\": {\n          const vizFormatter = new google.visualization.DateFormat(\n            formatter.options,\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          return;\n        }\n        case \"NumberFormat\": {\n          const vizFormatter = new google.visualization.NumberFormat(\n            formatter.options,\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          return;\n        }\n        case \"PatternFormat\": {\n          const vizFormatter = new google.visualization.PatternFormat(\n            formatter.options,\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          return;\n        }\n        default: {\n          console.warn(`Unknown formatter type: ${formatter.type}`);\n          return;\n        }\n      }\n    }\n  };\n}\n", "import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  GoogleChartDashboard,\n  GoogleVizEventListener,\n} from \"../../types\";\nimport { GoogleChartInternal } from \"../../utils\";\n\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport type UseGoogleChartDataTableParams = ReactGoogleChartProps & {\n  googleChartWrapper?: GoogleChartWrapper | null;\n  google: GoogleViz;\n  googleChartDashboard?: GoogleChartDashboard | null;\n};\n\nexport const useGoogleChartDataTable = (\n  props: UseGoogleChartDataTableParams,\n) => {\n  const { google, googleChartWrapper, googleChartDashboard } = props;\n  const [hiddenColumns, setHiddenColumns] = React.useState<string[]>([]);\n  // Re-draw the chart when hiddenColumns change\n  React.useEffect(() => {\n    if (!googleChartWrapper) {\n      return;\n    }\n    GoogleChartInternal.draw({\n      ...props,\n      hiddenColumns,\n      googleChartWrapper,\n      googleChartDashboard,\n      google,\n    });\n  }, [\n    hiddenColumns,\n    props.data,\n    props.rows,\n    props.columns,\n    props.options,\n    props.chartLoaderScriptUrl,\n    props.chartType,\n    props.formatters,\n    props.spreadSheetUrl,\n    props.spreadSheetQueryParameters,\n    props.legendToggle,\n    props.legend_toggle,\n  ]);\n\n  // Re-draw the chart when the window is resized\n  const onResize = () => {\n    const { googleChartWrapper } = props;\n    if (!googleChartWrapper) {\n      return;\n    }\n    googleChartWrapper.draw();\n  };\n\n  // Draw the chart when the google charts wrapper is ready and when the hiddenColumns change\n  const initialize = (googleChartWrapper: GoogleChartWrapper) => {\n    const listeners: GoogleVizEventListener[] = [];\n\n    const { legendToggle, legend_toggle } = props;\n    GoogleChartInternal.draw({\n      ...props,\n      hiddenColumns,\n      googleChartWrapper,\n      googleChartDashboard,\n      google,\n    });\n    window.addEventListener(\"resize\", onResize);\n    if (legend_toggle || legendToggle) {\n      const listener = GoogleChartInternal.listenToLegendToggle(props, [\n        hiddenColumns,\n        setHiddenColumns,\n      ]);\n\n      if (listener) listeners.push(listener);\n    }\n\n    return listeners;\n  };\n\n  // Remove event listeners and clear the chart when the component is unmounted\n  const destroy = (\n    googleChartWrapper: GoogleChartWrapper,\n    listeners: GoogleVizEventListener[],\n  ) => {\n    window.removeEventListener(\"resize\", onResize);\n    listeners.forEach((listener) => {\n      google.visualization.events.removeListener(listener);\n    });\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      googleChartWrapper.getChart() &&\n        googleChartWrapper.getChart().clearChart();\n    }\n  };\n\n  React.useEffect(() => {\n    if (!googleChartWrapper) {\n      return;\n    }\n    const listeners = initialize(googleChartWrapper);\n    return () => {\n      destroy(googleChartWrapper, listeners);\n    };\n  }, [googleChartWrapper, initialize, destroy]);\n};\n", "import { useEffect } from \"react\";\nimport {\n  GoogleChartWrapper,\n  GoogleViz,\n  ReactGoogleChartProps,\n} from \"../../types\";\n\nexport type GoogleChartEventsParams = ReactGoogleChartProps & {\n  googleChartWrapper?: GoogleChartWrapper | null;\n  google: GoogleViz;\n};\n\nconst listenToEvents = (props: GoogleChartEventsParams) => {\n  const { chartEvents, google, googleChartWrapper } = props;\n  if (!chartEvents) {\n    return;\n  }\n  if (!googleChartWrapper) {\n    console.warn(\"listenToEvents was called before chart wrapper ready.\");\n    return;\n  }\n  return chartEvents.map(({ eventName, callback }) => {\n    return google.visualization.events.addListener(\n      googleChartWrapper,\n      eventName,\n      (...args) => {\n        callback({\n          chartWrapper: googleChartWrapper,\n          props,\n          google: google,\n          eventArgs: args,\n        });\n      },\n    );\n  });\n};\n\nexport const useGoogleChartEvents = (props: GoogleChartEventsParams) => {\n  useEffect(() => {\n    if (!props.googleChartWrapper) return;\n\n    const listeners = listenToEvents(props);\n\n    return () => {\n      listeners?.forEach((listener) => {\n        props.google.visualization.events.removeListener(listener);\n      });\n    };\n  }, [props]);\n};\n", "import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  GoogleChartDashboard,\n  GoogleChartEditor,\n} from \"../types\";\nimport { useChartControls } from \"../hooks/internal/useGoogleChartControls\";\nimport { useChartId } from \"../hooks/internal/useChartId\";\nimport { useGoogleChartDataTable } from \"../hooks/internal/useGoogleChartDataTable\";\nimport { useGoogleChartEvents } from \"../hooks/internal/useGoogleChartEvents\";\n\ntype Props = ReactGoogleChartProps & {\n  google: GoogleViz;\n};\n\nexport const GoogleChart: React.FC<Props> = (props) => {\n  const [googleChartWrapper, setGoogleChartWrapper] =\n    React.useState<GoogleChartWrapper | null>(null);\n  // const [isReady, setIsReady] = React.useState<boolean>(false);\n  const [googleChartDashboard, setGoogleChartDashboard] =\n    React.useState<GoogleChartDashboard | null>(null);\n\n  const { addControls, renderControl } = useChartControls({\n    ...props,\n    chartDashboard: googleChartDashboard,\n    chartWrapper: googleChartWrapper,\n  });\n  useGoogleChartEvents({\n    ...props,\n    googleChartWrapper,\n  });\n  const { chartId } = useChartId(props);\n  const dashboardRef = React.useRef<HTMLDivElement>(null);\n  const toolbarRef = React.useRef<HTMLDivElement>(null);\n\n  React.useEffect(() => {\n    const {\n      options,\n      google,\n      chartType,\n      chartWrapperParams,\n      toolbarItems,\n      getChartEditor,\n      getChartWrapper,\n      onLoad,\n    } = props;\n\n    const chartConfig = {\n      chartType,\n      options,\n      containerId: chartId,\n      ...chartWrapperParams,\n    };\n    // Create ChartWrapper instance, pass it to the user and store it in state\n    const chartWrapper = new google.visualization.ChartWrapper(chartConfig);\n    chartWrapper.setOptions(options || {});\n    getChartWrapper?.(chartWrapper, google);\n\n    // Create Dashboard instance, needed for controls\n    const chartDashboard = new google.visualization.Dashboard(\n      dashboardRef.current,\n    );\n\n    // Create toolbar if needed\n    if (toolbarItems) {\n      google.visualization.drawToolbar(\n        toolbarRef.current as HTMLDivElement,\n        toolbarItems,\n      );\n    }\n\n    // Create ChartEditor instance if needed and pass it to the user\n    let chartEditor: GoogleChartEditor | null = null;\n    if (getChartEditor) {\n      chartEditor = new google.visualization.ChartEditor();\n      getChartEditor({\n        chartEditor,\n        chartWrapper,\n        google,\n      });\n    }\n    // Create and add controls to the chart / dashboard\n    addControls({ ...props, chartDashboard, chartWrapper });\n    setGoogleChartWrapper(chartWrapper);\n    setGoogleChartDashboard(chartDashboard);\n    onLoad?.(google, {\n      google,\n      chartWrapper,\n      chartEditor,\n      chartDashboard,\n    });\n  }, []);\n\n  useGoogleChartDataTable({\n    ...props,\n    googleChartWrapper,\n    googleChartDashboard,\n  });\n  const renderChart = () => {\n    const { width, height, options, style, className, rootProps, google } =\n      props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    return (\n      <div id={chartId} style={divStyle} className={className} {...rootProps} />\n    );\n  };\n\n  const renderToolBar = () => {\n    if (!props.toolbarItems) return null;\n    return <div ref={toolbarRef} />;\n  };\n\n  const { width, height, options, style } = props;\n\n  const divStyle = {\n    height: height || (options && options.height),\n    width: width || (options && options.width),\n    ...style,\n  };\n\n  // If render prop is provided, give the user full control over the rendering by passing renderChart, renderControl and renderToolbar functions\n  if (props.render) {\n    return (\n      <div ref={dashboardRef} style={divStyle}>\n        <div ref={toolbarRef} id=\"toolbar\" />\n        {props.render({\n          renderChart,\n          renderControl,\n          renderToolbar: renderToolBar,\n        })}\n      </div>\n    );\n  } else {\n    return (\n      <div ref={dashboardRef} style={divStyle}>\n        {renderControl(\n          ({ controlProp }) => controlProp.controlPosition !== \"bottom\",\n        )}\n        {renderChart()}\n        {renderControl(\n          ({ controlProp }) => controlProp.controlPosition === \"bottom\",\n        )}\n        {renderToolBar()}\n      </div>\n    );\n  }\n};\n\nexport default GoogleChart;\n", "import * as React from \"react\";\nimport { chartDefaultProps } from \"./default-props\";\nimport { ReactGoogleChartProps } from \"./types\";\n\nexport const ChartContext = React.createContext(chartDefaultProps);\n\nexport const ContextProvider = ({\n  children,\n  value,\n}: {\n  children: any;\n  value: ReactGoogleChartProps;\n}) => {\n  return (\n    <ChartContext.Provider value={value}>{children}</ChartContext.Provider>\n  );\n};\n", "import React from \"react\";\nimport { ReactGoogleChartProps } from \"./types\";\nimport { useLoadGoogleCharts } from \"./hooks\";\nimport { chartDefaultProps } from \"./default-props\";\nimport { GoogleChart } from \"./components/GoogleChart\";\nimport { ContextProvider } from \"./Context\";\n\n/**\n * Loads Google Charts JS and renders the GoogleChart component.\n */\nconst ChartView: React.FC<ReactGoogleChartProps> = (props) => {\n  const { google, isLoading, error } = useLoadGoogleCharts(props);\n  if (isLoading) {\n    return props.loader ?? null;\n  }\n  if (error) {\n    return props.errorElement ?? null;\n  }\n  if (google) {\n    return <GoogleChart google={google} {...props} />;\n  }\n  return null;\n};\n\n/**\n * Updates the context with the props and renders ChartView.\n */\nexport const Chart: React.FC<ReactGoogleChartProps> = (userProps) => {\n  const props = { ...chartDefaultProps, ...userProps };\n  return (\n    <ContextProvider value={props}>\n      <ChartView {...props} />\n    </ContextProvider>\n  );\n};\n\nexport default Chart;\n", "// Complete Google Charts Type Definition : https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/google.visualization/index.d.ts\n\nexport type GoogleVizDrawToolbar = (\n  toolbarContainer: HTMLDivElement,\n  components: GoogleChartToolbarItem[],\n) => any;\n\nexport type GoogleViz = {\n  charts: GoogleChartLoader;\n  visualization: {\n    ChartWrapper: GoogleChartWrapper;\n    ControlWrapper: GoogleChartControl;\n    ChartEditor: GoogleChartEditor;\n    DataTable: GoogleDataTable;\n    events: GoogleVizEvents;\n    arrayToDataTable: GoogleArrayToDataTable;\n    drawToolbar: GoogleVizDrawToolbar;\n    [otherKeys: string]: any;\n  };\n};\n\nexport type GoogleChartTicks = (number | Date)[];\n\nexport type GoogleChartEditor = {\n  new (): GoogleChartEditor;\n  openDialog: (\n    chartWrapper: GoogleChartWrapper,\n    chartEditorOptions?: {\n      dataSourceInput?: any;\n      [otherKeyMaybe: string]: any;\n    },\n  ) => null;\n  getChartWrapper: () => GoogleChartWrapper;\n  setChartWrapper: (chartWrapper: GoogleChartWrapper) => GoogleChartWrapper;\n  closeDialog: () => null;\n};\n\nexport type GoogleChartLoaderOptions = {\n  packages?: GoogleChartPackages[];\n  language?: string;\n  mapsApiKey?: string;\n};\nexport type GoogleChartLoader = {\n  load: (\n    version: GoogleChartVersion,\n    googleChartOptions: GoogleChartLoaderOptions,\n  ) => void;\n  setOnLoadCallback: (callback: () => void) => void;\n};\nexport interface ChartWrapperProps {\n  chartType: GoogleChartWrapperChartType;\n  containerId?: string;\n  options?: {\n    width?: number;\n    height?: number;\n    is3D?: boolean;\n    title?: string;\n    backgroundColor: string;\n  };\n  dataTable?: {};\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view?: any[] | {};\n  render?: (props: ChartWrapperProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (\n    props: ChartWrapperProps,\n    chartWrapper: GoogleChartWrapper,\n  ) => any;\n}\n\nexport type VizEventsProps = {\n  chartWrapper: GoogleChartWrapper;\n  onReady?: (chartWrapper: GoogleChartWrapper) => any;\n  onError?: (chartWrapper: GoogleChartWrapper) => any;\n  onSelect?: (selection: Array<{ row?: any; column?: any }>) => any;\n  render?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n};\n\n/*\n *\n * <GoogleChartsTypes>\n *\n */\n\n/*\n *\n * Reference + Docs:\n * https://developers.google.com/chart/interactive/docs/reference#constructor_3\n * https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\n *\n */\nexport type GoogleChartWrapperChartType =\n  | \"AnnotationChart\"\n  | \"AreaChart\"\n  | \"BarChart\"\n  | \"BubbleChart\"\n  | \"Calendar\"\n  | \"CandlestickChart\"\n  | \"ColumnChart\"\n  | \"ComboChart\"\n  | \"DiffChart\"\n  | \"DonutChart\"\n  | \"Gantt\"\n  | \"Gauge\"\n  | \"GeoChart\"\n  | \"Histogram\"\n  | \"LineChart\"\n  | \"Line\"\n  | \"Bar\"\n  | \"Map\"\n  | \"OrgChart\"\n  | \"PieChart\"\n  | \"Sankey\"\n  | \"ScatterChart\"\n  | \"Scatter\"\n  | \"SteppedAreaChart\"\n  | \"Table\"\n  | \"Timeline\"\n  | \"TreeMap\"\n  | \"WaterfallChart\"\n  | \"WordTree\";\n\n// https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\nexport interface ChartWrapperOptions {\n  chartType: string;\n  containerId: string;\n  options: Partial<{\n    width: number;\n    height: number;\n    is3D: boolean;\n    title: string;\n    backgroundColor:\n      | string\n      | { fill: string; stroke: string; strokeWidth: number };\n    hAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    vAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    legend: any;\n    colors: string[];\n    [otherOptionKey: string]: any;\n  }>;\n  dataTable?: GoogleDataTable;\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view: any[] | {};\n  [otherOptionKey: string]: any;\n}\n\nexport type GoogleChartAction = {\n  id: string;\n  text: string;\n  action: (chartWrapper: GoogleChartWrapper) => void;\n};\n\nexport type GoogleChartControlProp = {\n  controlType:\n    | \"CategoryFilter\"\n    | \"ChartRangeFilter\"\n    | \"DateRangeFilter\"\n    | \"NumberRangeFilter\"\n    | \"StringFilter\";\n  options: {};\n  controlWrapperParams?: {};\n  controlID?: string;\n  controlPosition?: \"top\" | \"bottom\";\n  controlEvents?: ReactGoogleChartEvent[];\n};\n\nexport type GoogleChartWrapper = {\n  new (chartWrapperOptions: Partial<ChartWrapperOptions>): GoogleChartWrapper;\n  draw: (chartArgs?: ChartWrapperProps) => any;\n  toJSON: () => string;\n  clone: () => GoogleChartWrapper;\n  getDataSourceUrl: () => string;\n  getDataTable: () => GoogleDataTable | null; // null if datasourceurl set or ref to DataTable\n  getChartType: () => GoogleChartWrapperChartType;\n  getChartName: () => string;\n  getChart: () => {\n    removeAction: (actionID: string) => void;\n    getSelection: () => { row?: any; column?: any }[];\n    setAction: (ChartAction: GoogleChartAction) => void;\n    getImageURI: () => void;\n    clearChart: () => void; // Clears the chart, and releases all of its allocated resources.\n  }; // ref to chart\n  getContainerId: () => string;\n  getQuery: () => string;\n  getRefreshInterval: () => number;\n  getOption: (key: string, opt_default_value?: any) => any; // returns opt_default_value if key not found\n  getOptions: () => {};\n  getSelection: () => { row?: any; column?: any }[];\n  getView: () => {} | any[]; // Same format as toJSON\n\n  setDataSourceUrl: (url: string) => void;\n  setDataTable: (table: any) => void;\n  setChartType: (chartType: GoogleChartWrapperChartType) => void;\n  setChartName: (name: string) => void; // Sets an arbitrary name for the chart. This is not shown anywhere on the chart, unless a custom chart is explicitly designed to use it.\n  setContainerId: (id: string) => void; // Sets the ID of the containing DOM element for the chart.\n  setQuery: (query_string: string) => void; // Sets a query string, if this chart queries a data source. You must also set the data source URL if specifying this value.\n  setRefreshInterval: (interval: number) => void; // Sets the refresh interval for this chart, if it queries a data source. You must also set a data source URL if specifying this value. Zero indicates no refresh.\n  setOption: (key: string, value: any) => void; // \tSets a single chart option value, where key is the option name and value is the value. To unset an option, pass in null for the value. Note that key may be a qualified name, such as 'vAxis.title'.\n  setOptions: (options_obj: Partial<ChartWrapperOptions[\"options\"]>) => void; //\n};\n\nexport type GoogleVizEventListener = {\n  key: Record<string, unknown>;\n};\n\nexport type GoogleVizEventName =\n  | \"ready\"\n  | \"error\"\n  | \"select\"\n  | \"animationfinish\"\n  | \"statechange\"\n  | \"ok\"\n  | \"cancel\"\n  | \"animationstart\";\n\nexport type GoogleVizEvents = {\n  addListener: (\n    chartWrapper: GoogleChartWrapper | GoogleChartControl | GoogleChartEditor,\n    name: GoogleVizEventName,\n    onEvent: (chartWrapper: GoogleChartWrapper) => any,\n  ) => GoogleVizEventListener;\n  removeListener: (eventListener: GoogleVizEventListener) => any;\n  removeAllListeners: (chartWrapper: GoogleChartWrapper) => any;\n};\n\nexport type GoogleChartPackages =\n  | \"corechart\"\n  | \"charteditor\"\n  | \"controls\"\n  | \"calendar\"\n  | \"gantt\"\n  | \"gauge\"\n  | \"geochart\"\n  | \"map\"\n  | \"orgchart\"\n  | \"sankey\"\n  | \"table\"\n  | \"timeline\"\n  | \"treemap\"\n  | \"wordtree\";\n\nexport type GoogleChartVersion = \"current\" | \"upcoming\" | string;\n\nexport type GoogleDataTableColumnType =\n  | \"string\"\n  | \"number\"\n  | \"boolean\"\n  | \"date\"\n  | \"datetime\"\n  | \"timeofday\";\n\n// export type GoogleDataTable = {\n//   addColumn: (type: GoogleDataTableColumnType) => number;\n// };\n\n// Reference https://developers.google.com/chart/interactive/docs/roles\nexport enum GoogleDataTableColumnRoleType {\n  annotation = \"annotation\",\n  annotationText = \"annotationText\",\n  certainty = \"certainty\",\n  emphasis = \"emphasis\",\n  interval = \"interval\",\n  scope = \"scope\",\n  style = \"style\",\n  tooltip = \"tooltip\",\n  domain = \"domain\",\n}\n\nexport type GoogleDataTableColumn =\n  | {\n      type: GoogleDataTableColumnType;\n      label?: string; //  A label for the column.\n      role?: GoogleDataTableColumnRoleType;\n      pattern?: string;\n      p?: {};\n      id?: string;\n    }\n  | string;\n\n// Ref : https://developers.google.com/chart/interactive/docs/reference#dataparam\n\nexport type GoogleDataTableCell =\n  | {\n      v?: any; // The cell value. Type should match DataTableColumn type field\n      f?: string; // A string version of the v value, formatted for display.\n      p?: {};\n    }\n  | string\n  | number\n  | boolean\n  | Date\n  | null;\n\nexport type GoogleDataTableRow = GoogleDataTableCell[];\n\nexport type GoogleDataTableJS = {\n  cols: GoogleDataTableColumn[];\n  rows: {\n    c: GoogleDataTableRow;\n  }[];\n  p?: {};\n};\n\n// Reference : https://developers.google.com/chart/interactive/docs/reference#DataTable\n\nexport type GoogleDataTableRowFilter = {\n  column: number;\n  value: any;\n  minValue?: any;\n  maxValue?: any;\n};\n\nexport type GoogleDataTableSortColumns =\n  | number\n  | {\n      column: number;\n      desc: boolean;\n    }\n  | number[]\n  | {\n      column: number;\n      desc: boolean;\n    }[];\n\nexport type GoogleDataTable = {\n  // https://developers.google.com/chart/interactive/docs/reference#dataparam\n  new (dataParam: any): GoogleDataTable;\n  addColumn: (column: GoogleDataTableColumn) => number;\n  addRow: (row?: GoogleDataTableRow) => number;\n  addRows: (rows?: GoogleDataTableRow[] | number[] | any[]) => number;\n  clone: () => GoogleDataTable;\n\n  getColumnId: (columnIndex: number) => string;\n  getColumnLabel: (columnIndex: number) => string;\n  getColumnPattern: (columnIndex: number) => string;\n  getColumnProperties: (columnIndex: number) => {};\n  getColumnProperty: (columnIndex: number, name: string) => any;\n  getColumnRange: (columnIndex: number) => {\n    min: number | null;\n    max: number | null;\n  };\n  getColumnRole: (columnIndex: number) => GoogleDataTableColumnRoleType;\n  getColumnType: (columnIndex: number) => GoogleDataTableColumnType;\n  getDistinctValues: (columnIndex: number) => any[];\n  getFilteredRows: (filters: GoogleDataTableRowFilter[]) => number[];\n  getFormattedValue: (rowIndex: number, columnIndex: number) => string;\n  getNumberOfColumns: () => number;\n  getNumberOfRows: () => number;\n  getProperties: (rowIndex: number, columnIndex: number) => {};\n  getProperty: (rowIndex: number, columnIndex: number, name: string) => any;\n  getRowProperties: (rowIndex: number) => {};\n  getRowProperty: (rowIndex: number, name: string) => any;\n  getSortedRows: (sortColumns: GoogleDataTableSortColumns) => number[];\n  getTableProperties: () => {};\n  getTableProperty: (name: string) => any;\n  getValue: (\n    rowIndex: number,\n    columnIndex: number,\n  ) => boolean | string | number | Date | number[] | null;\n  insertColumn: (\n    columnIndex: number,\n    type: GoogleDataTableColumnType,\n    label?: string,\n    id?: string,\n  ) => void;\n  insertRows: (\n    rowIndex: number,\n    numberOrArray: GoogleDataTableRow[] | number,\n  ) => void;\n  removeColumn: (columnIndex: number) => void;\n  removeColumns: (columnIndex: number, numberOfColumns: number) => void;\n  removeRow: (rowIndex: number) => void;\n  removeRows: (rowIndex: number, numberOfColumns: number) => void;\n  setCell: (\n    rowIndex: number,\n    columnIndex: number,\n    value?: any,\n    formattedValue?: string,\n    properties?: {},\n  ) => {};\n  setColumnLabel: (columnIndex: number, label: string) => void;\n  setColumnProperty: (columnIndex: number, name: string, value: any) => void;\n  setColumnProperties: (columnIndex: number, properties: {} | null) => void;\n  setFormattedValue: (\n    rowIndex: number,\n    columnIndex: number,\n    formattedValue: string,\n  ) => void;\n  setProperty: (\n    rowIndex: number,\n    columnIndex: number,\n    name: string,\n    value: any,\n  ) => void;\n  setProperties: (\n    rowIndex: number,\n    columnIndex: number,\n    properties: {} | null,\n  ) => void;\n\n  setRowProperty: (rowIndex: number, name: string, value: any) => void;\n  setRowProperties: (rowIndex: number, properties: {} | null) => void;\n  setTableProperties: (properties: {} | null) => void;\n  setValue: (rowIndex: number, columnIndex: number, value: boolean | string | number | Date | number[] | null) => void;\n  sort: (sortColumns: GoogleDataTableSortColumns) => void;\n  toJSON: () => string; // GoogleDataTableJS\n};\n\nexport type GoogleArrayToDataTable = (\n  data: any[][],\n  isFirstRowLabels?: boolean,\n) => GoogleDataTable;\n\nexport type GoogleChartOptions = {\n  width?: number;\n  height?: number;\n  is3D?: boolean;\n  backgroundColor: string;\n\n  title?: string;\n  hAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  vAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  bubble?: {};\n  pieHole?: number;\n  redColor?: string;\n  redFrom?: number;\n  redTo?: number;\n  yellowColor?: string;\n  yellowFrom?: number;\n  yellowTo?: number;\n  greenColor?: string;\n  greenFrom?: number;\n  greenTo?: number;\n  minorTicks?: number;\n  majorTicks?: string[];\n  legend?:\n    | string\n    | {\n        position?: string;\n        maxLines?: number;\n        [otherOptionKey: string]: any;\n      };\n  curveType?: string;\n  showTooltip?: boolean;\n  showInfoWindow?: boolean;\n  allowHtml?: boolean;\n  isStacked?: string | boolean;\n  minColor?: string;\n  midColor?: string;\n  maxColor?: string;\n  headerHeight?: number;\n  fontColor?: string;\n  showScale?: boolean;\n  bar?: { groupWidth?: string }; // Remove space between bars.\n  candlestick?: {\n    fallingColor?: { strokeWidth?: number; fill?: string }; // red\n    risingColor?: { strokeWidth?: number; fill?: string }; // green\n    [otherOptionKey: string]: any;\n  };\n  wordtree?: {\n    format?: string;\n    word?: string;\n    [otherOptionKey: string]: any;\n  };\n  [otherOptionKey: string]: any;\n};\n\n/*\n *\n * </GoogleChartsTypes>\n *\n */\n\nexport type WindowWithMaybeGoogle = Window & { google?: any };\n\nexport type ReactGoogleChartEvent = {\n  eventName: GoogleVizEventName;\n  callback: (eventCallbackArgs: {\n    chartWrapper: GoogleChartWrapper | null;\n    controlWrapper?: GoogleChartControl;\n    props: ReactGoogleChartProps;\n    google: GoogleViz;\n    eventArgs: any;\n  }) => void;\n};\n\nexport type GoogleChartToolbarItem = {\n  type: \"igoogle\" | \"html\" | \"csv\" | \"htmlcode\";\n  datasource: string;\n  gadget?: string;\n  userPrefs?: {\n    \"3d\": number;\n    [otherKeyMaybe: string]: any;\n  };\n};\n\nexport type GoogleChartFormatter = {\n  column: number | number[];\n  type:\n    | \"ArrowFormat\"\n    | \"BarFormat\"\n    | \"ColorFormat\"\n    | \"DateFormat\"\n    | \"NumberFormat\"\n    | \"PatternFormat\";\n  options?: {};\n  ranges?: [\n    // from\n    any,\n    // to\n    any,\n    // color\n    string,\n    // bgcolor\n    string,\n  ][];\n};\n\nexport type ReactGoogleChartProps = {\n  height?: string | number;\n  width?: string | number;\n  graphID?: string;\n  chartType: GoogleChartWrapperChartType;\n  diffdata?: {\n    old: any;\n    new: any;\n  };\n  options?: ChartWrapperOptions[\"options\"];\n  loader?: JSX.Element;\n  errorElement?: JSX.Element;\n  data?: any[] | {};\n  rows?: GoogleDataTableRow[];\n  columns?: GoogleDataTableColumn[];\n  chartActions?: GoogleChartAction[];\n  chartEvents?: ReactGoogleChartEvent[];\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n  graph_id?: string;\n  legendToggle?: boolean;\n  legend_toggle?: boolean;\n  onLoad?: (\n    google: GoogleViz,\n    paramsV2: {\n      google: GoogleViz;\n      chartWrapper: GoogleChartWrapper;\n      chartDashboard: GoogleChartDashboard;\n      chartEditor?: GoogleChartEditor | null;\n    },\n  ) => void;\n  getChartWrapper?: (\n    chartWrapper: GoogleChartWrapper,\n    google: GoogleViz,\n  ) => void;\n  getChartEditor?: (args: {\n    chartEditor: GoogleChartEditor;\n    chartWrapper: GoogleChartWrapper;\n    google: GoogleViz;\n  }) => void;\n  className?: string;\n  style?: React.CSSProperties;\n  formatters?: GoogleChartFormatter[];\n  spreadSheetUrl?: string;\n  spreadSheetQueryParameters?: {\n    headers: number;\n    gid?: number | string;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  };\n  rootProps?: any;\n  controls?: GoogleChartControlProp[];\n  render?: ReactGoogleChartDashboardRender;\n  //https://developers.google.com/chart/interactive/docs/gallery/toolbar#example_1\n  toolbarItems?: GoogleChartToolbarItem[];\n  toolbarID?: string;\n  chartWrapperParams?: any;\n  /**\n   * URL of the chart loader script. Defaults to https://www.gstatic.com/charts/loader.js\n   * Added to support loading from a different CDN in China to optimize performance\n   */\n  chartLoaderScriptUrl?: string;\n};\n\nexport type GoogleChartDashboard = {\n  draw: (data: GoogleDataTable) => void;\n  bind: (\n    controlWrapperOrWrappers: GoogleChartControl | GoogleChartControl[],\n    chartWrapper: GoogleChartWrapper,\n  ) => void;\n};\n\nexport type ReactGoogleChartDashboardRender = ({\n  renderControl,\n  renderChart,\n  renderToolbar,\n}: {\n  renderControl: (\n    filter: ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => boolean,\n  ) => any;\n  renderChart: () => any;\n  renderToolbar: () => any;\n}) => any;\nexport type GoogleChartControlOptions = any;\nexport type GoogleChartControl = {\n  new (chartWrapperOptions: GoogleChartControlOptions): GoogleChartControl;\n  getContainerId: () => string;\n  getOptions: () => GoogleChartControlOptions;\n  getState: () => any;\n  setState: (state: any) => void;\n  setOptions: (options: GoogleChartControlOptions) => void;\n  setControlType: (controlType: string) => void;\n};\n\nexport type ReactGoogleChartState = {\n  loadingStatus: \"loading\" | \"errored\" | \"ready\";\n  google: null | GoogleViz;\n  // hiddenColumns: string[];\n};\n\nexport type ReactGoogleChartContext = {\n  data: ReactGoogleChartProps[\"data\"];\n  rows: ReactGoogleChartProps[\"rows\"] | null;\n  columns: ReactGoogleChartProps[\"columns\"] | null;\n  diffdata: ReactGoogleChartProps[\"diffdata\"] | null;\n  options: ReactGoogleChartProps[\"options\"] | null;\n  legend_toggle: ReactGoogleChartProps[\"legend_toggle\"] | null;\n  legendToggle: ReactGoogleChartProps[\"legendToggle\"] | null;\n  chartType: ReactGoogleChartProps[\"chartType\"] | null;\n  formatters: ReactGoogleChartProps[\"formatters\"] | null;\n  spreadSheetUrl: ReactGoogleChartProps[\"spreadSheetUrl\"] | null;\n  spreadSheetQueryParameters:\n    | ReactGoogleChartProps[\"spreadSheetQueryParameters\"]\n    | null;\n};\n\nexport interface ApplyFormattersParams {\n  dataTable: GoogleDataTable;\n  formatters: GoogleChartFormatter[];\n  google: GoogleViz;\n}\n\nexport type GoogleChartControlAndProp = {\n  controlProp: GoogleChartControlProp;\n  control: GoogleChartControl;\n};\n\nexport type UseChartControlsParams = ReactGoogleChartProps & {\n  google: GoogleViz;\n  chartWrapper: GoogleChartWrapper | null;\n  chartDashboard: GoogleChartDashboard | null;\n};\n"],
  "mappings": "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",
  "names": ["useLoadScript", "src", "isLoading", "setIsLoading", "useState", "error", "setError", "isSuccess", "setIsSuccess", "onLoad", "useEffect", "document", "Error", "foundScript", "querySelector", "dataset", "loaded", "script", "createElement", "onLoadWithMarker", "addEventListener", "err", "console", "head", "append", "isGoogleReady", "google", "charts", "isGoogleChartsReady", "props", "controls", "toolbarItems", "getChartEditor", "visualization", "ChartWrapper", "Dashboard", "ChartEditor", "drawToolbar", "getGoogleInstanceFromWindow", "window", "useLoadGoogleCharts", "chartVersion", "chartPackages", "chartLanguage", "mapsApiKey", "googleCharts", "setGoogleCharts", "scriptInitializationError", "setScriptInitializationError", "googleChartsInitializationError", "setGoogleChartsInitializationError", "scriptLoadingError", "chartLoaderScriptUrl", "load", "packages", "language", "setOnLoadCallback", "chartDefaultProps", "legend_toggle", "options", "legendToggle", "getChartWrapper", "spreadSheetQueryParameters", "headers", "gid", "rootProps", "chartWrapperParams", "GoogleChartControls", "isReady", "chartControls", "filter", "length", "React", "controlProp", "control", "map", "div", "key", "getContainerId", "id", "uniqueID", "generateUniqueID", "GoogleChartControlsInternal", "initializeControls", "googleChartControls", "i", "controlType", "controlWrapperParams", "setState", "setOptions", "setControlType", "listenToControlEvents", "flatMap", "chartControl", "controlEvents", "event", "callback", "eventName", "events", "addListener", "args", "chartWrapper", "controlWrapper", "eventArgs", "createControlId", "controlID", "createChartControls", "controlIDMaybe", "controlOptions", "ControlWrapper", "containerId", "addControls", "chartDashboard", "bind", "useCreateChartControls", "setChartControls", "controlAndProp", "useMemo", "undefined", "useListenToControlEvents", "listeners", "forEach", "listener", "removeListener", "useChartControls", "renderControl", "Boolean", "useChartId", "chartIdRef", "useRef", "getChartId", "graphID", "graph_id", "chartIdFromProps", "currentChartId", "current", "chartId", "DEFAULT_CHART_COLORS", "loadDataTableFromSpreadSheet", "googleViz", "spreadSheetUrl", "urlParams", "Promise", "resolve", "reject", "queryString", "query", "encodeURIComponent", "sheet", "access_token", "urlQueryString", "urlToSpreadSheet", "Query", "send", "response", "isError", "getMessage", "getDetailedMessage", "getDataTable", "GRAY_COLOR", "GoogleChartInternal", "grayOutHiddenColumnsLabel", "hiddenColumns", "googleChartWrapper", "dataTable", "columnCount", "getNumberOfColumns", "hasAHiddenColumn", "colors", "Array", "from", "_dontcare", "columnID", "getColumnId", "includes", "draw", "listenToLegendToggle", "hiddenColumnsState", "setHiddenColumns", "chart", "getChart", "selection", "getSelection", "row", "columnIndex", "column", "state", "colID", "data", "diffdata", "rows", "columns", "chartType", "formatters", "googleChartDashboard", "chartDiff", "oldData", "arrayToDataTable", "old", "newData", "new", "prototype", "computeDiff", "DataTable", "isArray", "viewColumns", "fill", "_c", "label", "getColumnLabel", "type", "getColumnType", "calc", "getChartType", "clearChart", "setChartType", "viewTable", "DataView", "setColumns", "setDataTable", "applyFormatters", "formatter", "vizFormatter", "ArrowFormat", "format", "BarFormat", "ColorFormat", "ranges", "range", "addRange", "DateFormat", "NumberFormat", "PatternFormat", "warn", "useGoogleChartDataTable", "onResize", "initialize", "push", "destroy", "removeEventListener", "listenToEvents", "chartEvents", "useGoogleChartEvents", "GoogleChart", "setGoogleChartWrapper", "setGoogleChartDashboard", "dashboardRef", "toolbarRef", "chartConfig", "chartEditor", "renderChart", "width", "height", "style", "className", "divStyle", "renderToolBar", "ref", "render", "renderToolbar", "controlPosition", "ChartContext", "createContext", "ContextProvider", "children", "value", "Provider", "ChartView", "loader", "errorElement", "Chart", "userProps", "GoogleDataTableColumnRoleType"]
}
